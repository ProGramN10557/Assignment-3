public class Assignment3 {
	// assignments
	/**
	 * Write a method to find N numbers which are power of three. e.g. n=4,
	 * return {1,3,9,27}
	 */
	public int[] findPowerOfThree(int n) {
		if (n < 1) {
			return null;
		}
		int num = 3; 
		int array[] = new int[n];
		array[0] = 1;
		for(int i = 1; i < n; i++) {
	             array[i] = array[i-1] * num;
		  }
	
		return array;
	}

/**
	 * Given a integer 'n', if n is odd, print n odd numbers, if n is even,
	 * print n even numbers. For example, n = 3, print 1 3 5 n = 4, print 0 2 4
	 * 6
	 */
	public void printNumbers(int n) {
         	
		if(n < 0) {
		return;
		}
    		if(n%2 == 0) {
    		for(int i = 0; i < 2*n; i = i + 2) {
    		System.out.println(i);
    		
    		}
    	    }
   	 	else {
    		for(int j = 1; j < 2*n; j = j + 2) {
    		System.out.println(j);
    		
    		}
    	    }           
	}


	/**
	 * Given a integer 'n', return n%count, count is the number of digits of n
	 * For example, n = 100, return 1
	 */
	public int countDigits(int n) {
		      int count = 1;
	    	      int div = n;
		      while(div >= 10) {
		    	  div = div/10;
		    	  count++;
		      }
		      int rem = n%count;
		      System.out.println(rem);
		      return rem;
	 }

	

	/**
	 * Given numRows, generate the first numRows of Pascal's triangle. For
	 * example, given numRows = 5, return: [1] [1,1] [1,2,1] [1,3,3,1]
	 * [1,4,6,4,1]
	 */
	

public static void triangle(int NumRows) {

int r, num;
for (int i = 0; i <= NumRows; i++) {
    num = 1;
    r = i + 1;
    for (int j = NumRows - i; j > 0; j--) {
        System.out.print(" ");
    }
    for (int col = 0; col <= i; col++) {
        if (col > 0) {
            num = num * (r - col) / col;
        }
        System.out.print(num + " ");
    }
    System.out.println();
}	

	/**
	 * Given a string s consists of upper/lower-case alphabets and empty space
	 * characters ' ', return the length of last word in the string. If the last
	 * word does not exist, return 0. Note: A word is defined as a character
	 * sequence consists of non-space characters only.
	 */
	public int lengthOfLastWord(String str) {
		  char res[] = s.toCharArray();
        
        	  int len = res.length-1;
                  int j = len;
                  int count = 0;
        	  while(j >= 0) {
           		if(res[j] != ' ') {
               			count++;
               		if(j == 0 || res[j-1] == ' '){
                   		break;
               		}
           		}
           
           		j--;
        	}
        return count;
	}

/**
	 * Write a function that takes a string as input and reverse only the vowels
	 * of a string. For example: Given s = "hello", return "holle".
	 */
	
public String reverseVowels(String s) {
    ArrayList<Character> vowList = new ArrayList<Character>();
    vowList.add('a');
    vowList.add('e');
    vowList.add('i');
    vowList.add('o');
    vowList.add('u');
     
    char[] array = s.toCharArray();
 
    int i=0; 
    int j=s.length()-1;
 
    while(i<j){
        if(!vowList.contains(array[i])){
            i++;
            continue;
        }
 
        if(!vowList.contains(array[j])){
            j--;
            continue;
        }
 
        char t = array[i];
        array[i]=array[j];
        array[j]=t;
 
        i++;
        j--; 
    }
 
    return new String(array);
}


	/**
	 * Reverse a string by words. Do not use 'split' function. e.g. "I like
	 * soccer" --> "soccer like I"
	 */
	public String reverseString2(String str) {
	
if (string.isEmpty()) {
        return string;
    }
    int last = string.length();
    StringBuilder sb = new StringBuilder(string.length());
    boolean contextspace = ' ' == string.charAt(string.length() - 1);
    for (int i = string.length() - 1; i >= 0; i--) {
        if (contextspace != (string.charAt(i) == ' ')) {
            sb.append(string.substring(i + 1, last));
            last = i + 1;
            contextspace = !contextspace;
        }
    }
    sb.append(string.substring(0, last));
    return sb.toString();
}

	// Bonus
	/**
	 * A robot from Mars send a long message to Earth which only contains many
	 * "SOS", like "SOSSOS", "SOSSOSSOSSOSSOS" But the radiation from universe
	 * changed some characters of the massage. Write a method to count how many
	 * characters were changed. For example, "SOSSOSSOS" might be changed to
	 * "SOSSUSSOP", then your method should return 2. The message was consisted
	 * by "SOS" so its length will be multiple of 3. You could assume the
	 * message only contains upper letter.
	 */
	public int checkMessage(String message) {
		char res[] = message.toCharArray();
		String iindex = "SOS";
		char newindex[] = index.toCharArray();
		int count = 0;
		
		for(int i = 0; i < res.length ; i++ ) {
			
			if(res[i] != newindex[i%3]) {
				count++;
			}
		}
		
		return count;
		}
	}
